# Generated by Django 2.2.3 on 2019-08-15 23:41

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('level', models.CharField(choices=[('E', 'Easy'), ('M', 'Medium'), ('H', 'Hard')], max_length=2)),
                ('is_mystery', models.BooleanField(default=False)),
                ('cost', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='SolvingAttempt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('start_time', models.DateTimeField(blank=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_purchased', models.BooleanField(blank=True, default=False)),
                ('purchased_timedelta', models.DurationField(blank=True, null=True)),
                ('purchased_grade', models.IntegerField(blank=True, null=True)),
                ('purchase_cost', models.IntegerField(blank=True, default=0)),
                ('state', models.CharField(blank=True, choices=[('S', 'Solving'), ('C', 'Checking'), ('SD', 'Solved')], default='S', max_length=2)),
                ('mystery_cost', models.IntegerField(blank=True, default=0)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contest.Problem')),
                ('purchased_from', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='contest.SolvingAttempt')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('strength', models.FloatField(default=0)),
                ('is_deleted', models.BooleanField(default=False)),
                ('problems', models.ManyToManyField(related_name='teams', related_query_name='team', through='contest.SolvingAttempt', to='contest.Problem')),
            ],
            options={
                'ordering': ('-strength',),
            },
        ),
        migrations.AddField(
            model_name='solvingattempt',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contest.Team'),
        ),
        migrations.CreateModel(
            name='Duel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('worth', models.FloatField(blank=True, null=True)),
                ('pending', models.BooleanField(blank=True, default=False)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contest.Problem')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duel_requests', related_query_name='duel_request', to='contest.Team')),
                ('to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duels', related_query_name='duel', to='contest.Team')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='duel_wins', related_query_name='win_duel', to='contest.Team')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='solvingattempt',
            unique_together={('team', 'problem')},
        ),
    ]
